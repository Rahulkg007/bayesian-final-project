
  # Standardize the data:
  data {
  ym <- mean(y)
  ysd <- sd(y)
  for ( i in 1:Ntotal ) {
  zy[i] <- ( y[i] - ym ) / ysd
  }
  for ( j in 1:Nx ) {
  xm[j]  <- mean(x[,j])
  xsd[j] <-   sd(x[,j])
  for ( i in 1:Ntotal ) {
  zx[i,j] <- ( x[i,j] - xm[j] ) / xsd[j]
  }
  }
 
  
  # Specify the priors for original beta parameters
  # Prior locations to reflect the expert information
  mu0 <- ym # Set to overall mean a priori based on the interpretation of constant term in regression
  mu[1] <- 90 # Area - Strong
  mu[2] <- 100000 # Bedrooms- Weak
  mu[3] <- 0.1 #no Expert Bathroom
  mu[4] <- 120000 #Car Parks Strong
  mu[5] <- -150000 # Strong Assuming 1 is house and 0 is unit
  mu[6] <- 100000
  mu[7] <- 1111
  mu[8] <- 1111
  mu[9] <- 1111
  mu[10]  <- 1111
  mu[11]  <- 1111
  mu[12]  <- 1111
  mu[13]  <- 1111
  

  # Prior variances to reflect the expert information    
  Var0 <- ysd^2*50000 # set to a huge value
  Var[1] <- ysd^2 # Area
  Var[2] <- ysd^2 # Bedroom
  Var[3] <- ysd^2*20 # Bathrom
  Var[4] <- ysd^2 # CarPark
  Var[5] <- ysd^2*5 # Unit or house 
  Var[6] <- ysd^2
  Var[7] <- ysd^2
  Var[8] <- ysd^2
  Var[9] <- ysd^2
  Var[10] <- ysd^2
  Var[11] <- ysd^2
  Var[12] <- ysd^2
  Var[13] <- ysd^2
  
  # Compute corresponding prior means and variances for the standardised parameters
  muZ[1:Nx] <-  mu[1:Nx] * xsd[1:Nx] / ysd 
  
  muZ0 <- (mu0 + sum( mu[1:Nx] * xm[1:Nx] / xsd[1:Nx] )*ysd - ym) / ysd 
  
  # Compute corresponding prior variances and variances for the standardised parameters
  VarZ[1:Nx] <- Var[1:Nx] * ( xsd[1:Nx]/ ysd )^2
  VarZ0 <- Var0 / (ysd^2)
  
  }
  # Specify the model for standardized data:
  model {
  for ( i in 1:Ntotal ) {
  zy[i] ~ dt( zbeta0 + sum( zbeta[1:Nx] * zx[i,1:Nx] ) , 1/zsigma^2 , nu )
  }
  
  # Priors vague on standardized scale:
  zbeta0 ~ dnorm( muZ0 , 1/VarZ0^2 ) 
   
  for ( j in 1:Nx ) {
  zbeta[j] ~ dnorm( muZ[j] , 1/VarZ[j] )
  }
  zsigma ~ dgamma(0.01,0.01)#dunif( 1.0E-5 , 1.0E+1 )
  nu ~ dexp(1/30.0)
  
  # Transform to original scale:
  beta[1:Nx] <- ( zbeta[1:Nx] / xsd[1:Nx] )*ysd
  beta0 <- zbeta0*ysd  + ym - sum( zbeta[1:Nx] * xm[1:Nx] / xsd[1:Nx] )*ysd
  sigma <- zsigma*ysd
  
  # Compute predictions at every step of the MCMC
  pred <- beta0 + beta[1] * xPred[1] + beta[2] * xPred[2] + beta[3] * xPred[3] + beta[4] * xPred[4] + beta[5] * xPred[5] 
  + beta[6] * xPred[6] + beta[7] * xPred[7] + beta[8] * xPred[8] + beta[9] * xPred[9] + beta[10] * xPred[10]+ beta[11] * xPred[11] 
  + beta[12] * xPred[12] + beta[13] * xPred[13]
  
  }
  
